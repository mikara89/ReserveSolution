#See https://aka.ms/containerfastmode to understand how Visual Studio uses this Dockerfile to build your images for faster debugging.

FROM mcr.microsoft.com/dotnet/core/aspnet:3.1-buster-slim AS base
WORKDIR /app
EXPOSE 80
EXPOSE 443

FROM mcr.microsoft.com/dotnet/core/sdk:3.1-buster AS build
WORKDIR /src
COPY ["IdentityAPI/IdentityService/IdentityService.csproj", "IdentityAPI/IdentityService/"]
COPY ["IdentityAPI/IdentityService.Data/IdentityService.Data.csproj", "IdentityAPI/IdentityService.Data/"]
COPY ["IdentityAPI/IdentityService.Messaging.Sender/IdentityService.Messaging.Sender.csproj", "IdentityAPI/IdentityService.Messaging.Sender/"]
RUN dotnet restore "IdentityAPI/IdentityService/IdentityService.csproj"
COPY . .
WORKDIR "/src/IdentityAPI/IdentityService"
RUN dotnet build "IdentityService.csproj" -c Release -o /app/build

FROM build AS publish
RUN dotnet publish "IdentityService.csproj" -c Release -o /app/publish

FROM base AS final
WORKDIR /app
COPY --from=publish /app/publish .



WORKDIR /https
# Use opnssl to generate a self signed certificate cert.pfx with password $env:certPassword
RUN openssl genrsa -des3 -passout pass:1234 -out server.key 2048
RUN openssl rsa -passin pass:1234 -in server.key -out server.key
RUN openssl req -sha256 -new -key server.key -out server.csr -subj '/CN=localhost'
RUN openssl x509 -req -sha256 -days 365 -in server.csr -signkey server.key -out server.crt
RUN openssl pkcs12 -export -out cert.pfx -inkey server.key -in server.crt -certfile server.crt -passout pass:1234
WORKDIR /app
COPY ["IdentityAPI/IdentityService/Cert/https/aspnetappDocker.pfx", "/https/aspnetappDocker.pfx"]
COPY ["IdentityAPI/IdentityService/Cert/https/ID4.pfx", "/https/ID4.pfx"]
RUN update-ca-certificates

ENTRYPOINT ["dotnet", "IdentityService.dll"]